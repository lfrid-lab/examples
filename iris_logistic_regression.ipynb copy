{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Iris logistic regression ",
   "id": "34ec42b88538ef13"
  },
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:50.578897Z",
     "start_time": "2024-09-12T16:10:50.568483Z"
    }
   },
   "source": [
    "# import libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "from sklearn.metrics import f1_score, precision_score, recall_score"
   ],
   "outputs": [],
   "execution_count": 77
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Import File",
   "id": "f4841d471f836ec9"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:50.628927Z",
     "start_time": "2024-09-12T16:10:50.599381Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# import the dataset\n",
    "df = pd.read_csv(\"Iris.csv\")\n",
    "df.head()"
   ],
   "id": "457314c0cf9aa91a",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 78
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:50.778293Z",
     "start_time": "2024-09-12T16:10:50.758222Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Define the data set\n",
    "df.info()"
   ],
   "id": "3052e489838f5067",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 150 entries, 0 to 149\n",
      "Data columns (total 6 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             150 non-null    int64  \n",
      " 1   SepalLengthCm  150 non-null    float64\n",
      " 2   SepalWidthCm   150 non-null    float64\n",
      " 3   PetalLengthCm  150 non-null    float64\n",
      " 4   PetalWidthCm   150 non-null    float64\n",
      " 5   Species        150 non-null    object \n",
      "dtypes: float64(4), int64(1), object(1)\n",
      "memory usage: 7.2+ KB\n"
     ]
    }
   ],
   "execution_count": 79
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Identify Independent variables x",
   "id": "d0cd043d4268e62d"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:50.918648Z",
     "start_time": "2024-09-12T16:10:50.913116Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Define the x and independent variables\n",
    "x = df[[\"SepalLengthCm\",\"SepalWidthCm\",\"PetalLengthCm\",\"PetalWidthCm\"]].values"
   ],
   "id": "ce12209590d37a57",
   "outputs": [],
   "execution_count": 80
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Identify dependent variables y",
   "id": "49a7572b49e1b955"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:51.210274Z",
     "start_time": "2024-09-12T16:10:50.967755Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Define the Y and dependent variable\n",
    "# The Y value is defined as a new column with the encoded species and the species information presenting a binomial set. \n",
    "\n",
    "df[\"EncodedSpecies\"] = df[\"Species\"].apply(lambda x: 0 if x == \"Iris-setosa\" else 1)\n",
    "\n",
    "# Note binomial outcome uses Y \n",
    "Y = df[\"EncodedSpecies\"].values\n",
    "\n",
    "sns.countplot(x=\"EncodedSpecies\",data=df)\n",
    "plt.show()"
   ],
   "id": "e2327114c81e31a8",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 81
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": " ### Split the data into a training and test set.",
   "id": "d239045a9abfb630"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:51.260104Z",
     "start_time": "2024-09-12T16:10:51.249033Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Define training and test set and split the ratio 75 - train and 25 - test\n",
    "x_train, x_test, Y_train, Y_test = train_test_split(x, Y, test_size=0.25, random_state=0)"
   ],
   "id": "fa1c260cd1fe12a9",
   "outputs": [],
   "execution_count": 82
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Use sklearn’s logistic regression function to fit a model and make predictions on the test set.",
   "id": "cb87dbe3d8218834"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:51.348660Z",
     "start_time": "2024-09-12T16:10:51.318803Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Fit the model, regress the model and then define the independent and dependant variables. \n",
    "log_reg = LogisticRegression()\n",
    "log_reg.fit(x_train, Y_train)\n",
    "\n",
    "# make predictions on test data\n",
    "Y_pred = log_reg.predict(x_test).reshape(-1,1)"
   ],
   "id": "1f37d4190a6eb26a",
   "outputs": [],
   "execution_count": 83
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Use sklearn to generate a confusion matrix, which compares the predicted labels to the actual labels.",
   "id": "6abd038eeb9f8bfc"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:51.844316Z",
     "start_time": "2024-09-12T16:10:51.394197Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Place the classes into the confusion matrix. \n",
    "conf_mat = confusion_matrix(Y_test, Y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=conf_mat)\n",
    "disp.plot(cmap=plt.cm.Blues)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n",
    "cm_df = pd.DataFrame(conf_mat)\n",
    "cm_df"
   ],
   "id": "112baf8ab991dc4e",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "    0   1\n",
       "0  13   0\n",
       "1   0  25"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 84
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Analyse the confusion matrix and provide a prediction, in a comment, whether the model is likely to have higher precision, higher recall, or similar precision and recall.",
   "id": "8f2dd09054f1def"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:51.953222Z",
     "start_time": "2024-09-12T16:10:51.946366Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Binomial - Confusion matrix is a summary of predicated versus actual \n",
    "# Positive (actual) Positive (predicted) = 13 (true positive)\n",
    "# Positive (actual)  Negative (predicted) = 0 (false negative)\n",
    "# Negative (actual)  Positive (predicted) = 0 (false positive)\n",
    "# Negative (actual)  Negative (predicted) = 25 (true negative)\n",
    "\n",
    "# value Input \n",
    "t_p = int(13)\n",
    "f_n = int(0)\n",
    "f_p = int(0)\n",
    "t_n = int(25)\n",
    "\n",
    "# The model is likely to have a similar precision and recall due to having high True Positive and high True Negative values with zero false negative and zero false positive values. Making the model "
   ],
   "id": "a969915e15f538a8",
   "outputs": [],
   "execution_count": 85
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Write your own code to calculate the accuracy, precision, and recall, and check whether your prediction was right.",
   "id": "6deae26c05f4af14"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:52.113812Z",
     "start_time": "2024-09-12T16:10:52.057147Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Precision - Recall and Result \n",
    "\n",
    "# Precision\n",
    "# Formula\n",
    "# Number of True Positives / Numbers of True Positives + Number of False Positives.\n",
    "\n",
    "# Manual Precision score\n",
    "ps_formula = (t_p/t_p+f_p)\n",
    "print(\"\")\n",
    "print(\"Manual Precision score result\")\n",
    "print(f\"Manual Precision result from confusion matrix:{ps_formula}\")\n",
    "\n",
    "# Python Precision score\n",
    "precision_score(Y_test, Y_pred, average='micro')\n",
    "print(precision_score(Y_test, Y_pred, average='micro'))\n",
    "precision_formula = ()\n",
    "prec = precision_score(Y_test, Y_pred)\n",
    "print(\"\")\n",
    "print(\"Python Precision score result\")\n",
    "print(f\"Python Precision result from confusion matrix:{prec}\")\n",
    "\n",
    "# Recall\n",
    "# Formula\n",
    "# Number of True Positives/numbers of True Positives + Number of False Negatives.\n",
    "\n",
    "# Manual Recall score\n",
    "ps_formula = (t_p/t_p+f_n)\n",
    "print(\"\")\n",
    "print(\"Manual Recall score result\")\n",
    "print(f\"Manual Recall result from confusion matrix:{ps_formula}\")\n",
    "\n",
    "# Python Recall score\n",
    "recall_score(Y_test, Y_pred, average='micro')\n",
    "rec = recall_score(Y_test, Y_pred)\n",
    "print(\"Python Recall score result\")\n",
    "print(f\"Python Recall result from confusion matrix:{rec}\")\n",
    "\n",
    "# Accuracy\n",
    "# Use score method to get accuracy of model\n",
    "score = log_reg.score(x_test, Y_test)\n",
    "print(\"\")\n",
    "print('Accuracy: {}'.format(score))\n",
    "print(\"\")\n",
    "\n",
    "# F1 Score \n",
    "# The F1 Score uses precision to get the rate of true positive records among a total record classified as positive \n",
    "\n",
    "# Formula \n",
    "# 2 * Precision*Recall / Precision+Recall\n",
    "\n",
    "# Manual Average f1 score\n",
    "f1_formula = (2*(prec*rec)/(prec+rec))\n",
    "print(\"\")\n",
    "print(\"Manual F1 result\")\n",
    "print(f\"Manual F1 result with formula with confusion matrix results:{f1_formula}\")\n",
    "\n",
    "# Python Average f1 score\n",
    "av_f1 = f1_score(Y_test, Y_pred, average='micro')\n",
    "print(\"\")\n",
    "print(\"Python F1 formula result\")\n",
    "print(f\"This is the F1 Score through matrix :{av_f1}\")\n",
    "\n",
    "\n",
    "# KNeighborsClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "knn = KNeighborsClassifier(n_neighbors=3)\n",
    "knn.fit(x_train, Y_train)\n",
    "y_pred = knn.predict(x_test)\n",
    "print(\"\")\n",
    "print(\"Python KNeighborsClassifier result\")\n",
    "print(f\"This is the KNeighborsClassifier :{av_f1}\")\n",
    "print(f'Our model accuracy with k=3 is: {knn.score(x_test, Y_test)}')"
   ],
   "id": "26fcddf9ae48f8aa",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Manual Precision score result\n",
      "Manual Precision result from confusion matrix:1.0\n",
      "1.0\n",
      "\n",
      "Python Precision score result\n",
      "Python Precision result from confusion matrix:1.0\n",
      "\n",
      "Manual Recall score result\n",
      "Manual Recall result from confusion matrix:1.0\n",
      "Python Recall score result\n",
      "Python Recall result from confusion matrix:1.0\n",
      "\n",
      "Accuracy: 1.0\n",
      "\n",
      "\n",
      "Manual F1 result\n",
      "Manual F1 result with formula with confusion matrix results:1.0\n",
      "\n",
      "Python F1 formula result\n",
      "This is the F1 Score through matrix :1.0\n",
      "\n",
      "Python KNeighborsClassifier result\n",
      "This is the KNeighborsClassifier :1.0\n",
      "Our model accuracy with k=3 is: 1.0\n"
     ]
    }
   ],
   "execution_count": 86
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "The model runs with a clean accuracy, precision and recall. This ensures that the identification of Iris-setosa versus not Iris-setosa, is run at a 100% confirmation. ",
   "id": "8b3993866e4d0db7"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# OPTIONAL TASK 2",
   "id": "f4e39598f7cb0536"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Identify dependent variables y",
   "id": "e34b0a6a54e45bfc"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:52.405692Z",
     "start_time": "2024-09-12T16:10:52.158872Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Define the y and dependent variable\n",
    "# This time the y dependent has 3 optional outcomes. \n",
    "\n",
    "y = df[\"Species\"]\n",
    "\n",
    "sns.countplot(x=\"Species\",data=df)\n",
    "plt.show()"
   ],
   "id": "f47dc372c911d0",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 87
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": " ### Split the data into a training and test set.",
   "id": "730cdb4c855d03a0"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:52.459784Z",
     "start_time": "2024-09-12T16:10:52.449825Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Define training and test set and split the ratio 75 - train and 25 - test\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)"
   ],
   "id": "8ff9ca6657122526",
   "outputs": [],
   "execution_count": 88
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Use sklearn’s logistic regression function to fit a model and make predictions on the test set.",
   "id": "392a56dedfc190cb"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "",
   "id": "eeca033d4b5e595d"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:52.590392Z",
     "start_time": "2024-09-12T16:10:52.559971Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Fit the model, regress the model and then define the independent and dependant variables. \n",
    "log_reg = LogisticRegression()\n",
    "log_reg.fit(x_train, y_train)\n",
    "\n",
    "# make predictions on test data\n",
    "y_pred = log_reg.predict(x_test).reshape(-1,1)"
   ],
   "id": "dc23098b80cae932",
   "outputs": [],
   "execution_count": 89
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Use sklearn to generate a confusion matrix, which compares the predicted labels to the actual labels.",
   "id": "436392334566952f"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:52.815993Z",
     "start_time": "2024-09-12T16:10:52.606005Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Place the classes into the confusion matrix. \n",
    "conf_mat = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=conf_mat)\n",
    "disp.plot(cmap=plt.cm.Blues)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n",
    "cm_df = pd.DataFrame(conf_mat)\n",
    "cm_df"
   ],
   "id": "4c52f11936a0a241",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ],
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAe8AAAHFCAYAAADbvnGdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA8+UlEQVR4nO3de5yMdf/H8ffMrtldduWwCNU6y/lsU9yEIlTcHW6UEiVlV7HKKYfaJIfK7Vyh3FHk1OGmbiKim3UntArtrkNEbLL7s8fZndnfH9qptWLXXLszc+3r6TFlrrnme32uufDZz+f6znVZcnJycgQAAHyG1dMBAACAwiF5AwDgY0jeAAD4GJI3AAA+huQNAICPIXkDAOBjSN4AAPgYkjcAAD6G5A3AbVzrCSheJG/4lNjYWD333HPq1KmTmjZtqq5du2rChAk6ceJEkW3z3Xff1W233aamTZtq/vz5howZExOj+vXrKyYmxpDxCrKt+vXra8eOHZddJyEhwbXOyZMnCzy23W7XK6+8ok8//fSq69avX19z5swp8NgA/hrJGz5j+fLl6tu3r86dO6eoqCi9/fbbGjJkiHbv3q37779fhw4dMnybKSkpmjZtmpo2barFixerT58+hozbqFEjrVy5Uo0aNTJkvIKwWq36/PPPL/vahg0brmnMs2fPaunSpcrOzr7quitXrtQDDzxwTdsBkBfJGz5hz549mjJlivr3768lS5bo7rvvVnh4uB588EF98MEHCggI0Lhx4wzfbnJyspxOp7p27ao2bdqoatWqhowbHBys5s2bKzg42JDxCqJly5batGnTZRPthg0b1KBBgyLdfvPmzXX99dcX6TaAkoLkDZ+wePFihYSEaOTIkfleq1ChgsaMGaMuXbooLS1NkuRwOLR8+XLdfffdatq0qTp16qSZM2cqMzPT9b4xY8Zo4MCBWrNmjbp166bGjRvr3nvv1VdffSVJWrt2rTp37ixJGjdunOrXry9J6ty5s8aMGZMnhrVr1+ZpOWdkZGjy5Mn629/+psaNG6t79+5avHixa/3Ltc1jY2M1ePBghYeHq2XLlho6dKji4uLyvWfnzp0aNGiQmjVrpttuu00zZsyQw+G46mfYo0cPJSUladeuXXmWHzp0SMeOHdNdd92V7z1ffPGF+vfvrxYtWrj2Y/ny5ZKkkydPqkuXLpKksWPHuj6rMWPG6NFHH9WkSZPUsmVL9ejRQw6HI0/bPCIiQk2aNNGRI0dc25ozZ44aNGig3bt3X3VfgJKO5A2vl5OTox07dqhdu3YKCgq67Do9evTQsGHDVLp0aUnSxIkTNXXqVHXt2lULFizQQw89pGXLlunpp5/OM7nqwIEDWrx4sYYPH6558+bJz89PkZGRSk5OVqdOnTR37lxJ0lNPPaWVK1cWOOZXXnlFX331lUaPHq3FixerS5cumj59utasWXPZ9Xft2qV+/fq53vvyyy/r9OnT6tu3rxISEvKsO2rUKLVq1UoLFy5Ur169tGjRIq1ateqqMdWpU0d169bN1zpfv3692rZtq0qVKuVZvnXrVg0bNkyNGjXS/PnzNWfOHN1444166aWXtH//flWuXDnP55P7e0n65ptvdPr0ac2bN09RUVHy8/PLM/bkyZNVunRpTZo0SdLF47Bw4UINGjRIbdu2veq+ACWdv6cDAK7m/PnzyszM1A033FCg9ePj47V69WpFRUVpyJAhkqTbbrtNlStX1vPPP6+vvvpKHTt2lCRduHBBa9eu1U033SRJKl26tB5++GHt2rVL3bp1c7WSb7rpJjVv3rzAMe/evVu33XabevbsKUkKDw9X6dKlVbFixcuu/9prryksLExvvfWWK9G1b99ed9xxh2bPnq1//vOfrnUfeOABDRs2TJLUrl07ffHFF9q6dav69u171bjuuusu/etf/9LkyZPl73/xr/+GDRs0dOjQfOvGx8erT58+Gj9+vGtZixYtFB4erpiYGDVr1izP59OwYUPXetnZ2XrppZf+sk0eGhqqSZMmacSIEVq1apWWLl2qevXq6ZlnnrnqPgCg8oYPyE1mBWkNS3K1XXMTZ66ePXvKz88vT6u6QoUKrsQtyZVs0tPT3Yo5PDxcH374oZ544gktW7ZMJ06c0LBhw9SpU6d866alpSk2NlZ33XVXngq1bNmyuv322/O1kVu0aJHn+fXXX+86XXA1l7bO9+/frzNnzujOO+/Mt+7jjz+uV199VampqTpw4IA2bNigN998U9LFWeZXUq5cuaue3+7Ro4e6deumiRMn6sSJE5o5c6ZsNluB9gMo6Uje8HrXXXedypQpo1OnTv3lOmlpaUpOTpYk1/8vbQP7+/urfPnyunDhgmvZpW14i8UiSXI6nW7FPH78eD377LM6efKkoqOj1bVrV/Xt2/eyM+IvXLignJwchYaG5nstNDQ0T7ySFBgYmOe51Wot8Pesa9asqQYNGrha5xs2bFD79u113XXX5Vv3t99+U2RkpFq3bq0HH3xQc+bMUUpKiqSrf6+7TJkyBYqnT58+cjqdqlGjhmrWrFmg9wAgecNHtG/fXjExMXkmnP3Zhx9+qFtuuUXff/+9KxElJibmWScrK0vnz59X+fLl3Y7n0i7ApZWvzWbTU089pc8++0xffvmlq7qMiorKN1ZISIgsFot+/fXXfK8lJiaqXLlybsf7Zz169NCmTZuUlZWlzz//PF+HIteoUaMUGxurd999V/v27dNnn31m6Iz+9PR0TZ06VfXq1dOPP/6oJUuWGDY2YHYkb/iEQYMGKSkpSbNmzcr3WmJiopYsWaI6deqoUaNGrglP69evz7Pe+vXr5XA41KpVK7diCQ4O1i+//JJn2Z49e1y/z8jIULdu3VzJqFq1anrooYfUs2fPy3YPSpcurcaNG+uzzz7L80PBhQsXtHXrVrfjvdRdd92lpKQkLVy4UMnJya4Z45fas2eP7rzzToWHh7va2bkz8XM7E5dORCuM1157Tb/88ovmzJmjhx9+WLNnz843OQ/A5TFhDT6hefPmeuaZZzRr1iwlJCSod+/eKl++vOLi4rR48WJlZma6EnudOnXUp08fzZ49W+np6WrTpo0OHjyouXPnKjw8XB06dHArlttvv11vvvmm3nzzTTVr1kxbtmzJ8/WrwMBANWrUSHPnzlWpUqVUv359HT16VOvWrVO3bt0uO2ZUVJQGDx6sIUOGqH///srKytJbb70lu93umpxmlBtvvFFNmjTRm2++qTvuuMM1Q/9STZs21aeffqpGjRrp+uuv17fffqu33npLFovFNScgJCREkrRz507Vrl1bzZo1K1AMu3fv1rJlyzRixAjVqFFDzz77rDZt2qQxY8ZoxYoVbv1QAJQEJG/4jKeeekoNGzbU8uXL9corryg5OVlVq1ZVp06dNHTo0DwXUJkyZYrCwsK0Zs0avf3226pcubIeeeQRPf3007Ja3Ws4Pfnkk/rtt9+0ePFiZWVlqVOnTpoyZYqeeuop1zovvfSSZs2apSVLligxMVEVK1bU/fff/5ezqdu1a6d33nlHs2fP1siRI2Wz2dS6dWtNmzZNdevWdSvey+nRo4diY2P/smUuSa+++qqio6MVHR0tSapRo4ZefPFFffLJJ/rmm28kXexCPPbYY1q5cqW2bdumr7/++qrbTktL09ixY1WvXj0NHjxY0sVz5BMnTtRTTz2lRYsW6cknnzRgLwHzsuRwRwEAAHwK57wBAPAxJG8AAHwMyRsAAB9D8gYAwMeQvAEA8DEkbwAAfIzPfs/b6XQqOztbVqvVdT1qAIDvyMnJkdPplL+/v9vXX/grTqezwNf+vxqLxVJkcRaWzybv7OxsxcbGejoMAICbmjRpUiR3lHM6ndr05dcKLXf5qwgWlr+/v5o0aeIVCdxnk3fuh9dnzvdKs7t3ByhfUtpm1brIRiVuv4+/M8DTIRQ7h8OhuIOxqtugCZcLNbmSeqxz97uokmFOTo5Cy5VWn+dWKjU9y62xygSV0roZ/zCsineXzybv3FZ5mt1ZopJYrpK23yXpH7RL+fn5lej9L0lK6rEu6lOfqRkOpWU6rr7ilVg8X23/mc8mbwAACsRiufhwdwwvQvIGAJibxep+5exllbd3RQMAAK6KyhsAYG4WGdA2NyQSw5C8AQDmRtscAAB4GpU3AMDcmG0OAICPoW0OAAA8jcobAGButM0BAPAxtM0BAICnUXkDAMyNtjkAAL7GgLa5lzWqSd4AAHMzYeXtXT9KAACAqyJ5AwDMLXe2ubuPa2C329WrVy/FxMTke+3ChQvq0KGD1q5dW+hxaZsDAMzNQ18Vy8zMVFRUlOLi4i77+owZM3T27NlrCofKGwAAg8XHx+vBBx/UTz/9dNnXv/nmG+3atUuVKlW6pvFJ3gAAc7NajHkUwu7duxUeHq6VK1fme81ut2vChAmaOHGibDbbNe0SbXMAgLlZLAa0zQuXvPv37/+Xry1cuFANGzZU+/btrzkckjcAAAWUkpIiPz8/13ObzVao6jk+Pl4rVqzQJ5984lYcJG8AgLkZ+D3vjh07Kj093bU4IiJCkZGRBRoiJydHL7zwgoYPH67Q0FC3wiF5AwDMzWKVLDnujyFp27Zt+Srvgjp16pT27t2rw4cPa9q0aZKk9PR0TZo0SRs2bNCiRYsKPBbJGwCAAgoODs6TvAujSpUq2rhxY55lAwYM0IABA3TPPfcUaiySNwDA3Lzk8qj+/v4KCwvLt6xixYqqUqVK4cZyOxoAALyZgW1zb0HyBgCYm4cr78OHD//la1u2bLmmMb3rRwkAAHBVVN4AAHOjbQ4AgI/xkglrRvKuHyUAAMBVUXkDAMyNtjkAAD6GtjkAAPA0Km8AgLnRNgcAwMeYMHl7VzQAAOCqqLwBAObnZRPO3EXyBgCYm8UquZu7vaxtTvIGAJgbXxUDAACeRuUNADA32uYAAPgY2uYAAMDTqLwBAKZmsVhkcbNydvf9RiN5AwBMzYzJm7Y5AAA+hsobAGBuFhkw29yIQIxD8gYAmBptcwAA4HFU3gAAU6PyRrGz+Vv19Yw+uq3h9a5lZULKauPL9+jnfz2ir6b1VtfmN3gwQhSFjMwsPTPlfXWPXK6GPSdo7rLNng4JRYRjXfRyk7e7D2/i0eSdmZmpcePGqXXr1mrfvr2WLFniyXC8TkApP709vJMa3FjetaxG5RDdVKO2Ptwer1tHrdOKbXF6L6qLbqwU7MFIYbSJs9dp38ET+ueobprx3P2avugzfbx5r6fDQhHgWBc9MyZvj7bNp0+frgMHDmjp0qU6deqURo8erWrVqql79+6eDMsr1K9eTm9Fdsz3B6ZqhTI6fy5Ri/7zg9LsTs3f8L2i/t5crWpX0onEFA9FCyOlpmfqvY93asXrTyo0IFU3N26mH4+d1dsfbtO9XVp4OjwYiGONa+WxyjstLU2rVq3S+PHj1ahRI91xxx16/PHHtXz5ck+F5FVubXi9dvxwWt0mfJpn+c5Dv+iXUyclSf5+Fj18e13Z/K3ak5DoiTBRBA78+LOysh1q27Sma9ktzWtpz/fH5XQ6PRgZjMaxLiYWgx5exGOV96FDh5Sdna0WLf746bJVq1ZauHChnE6nrNaSfTr+nU2Hrvh6jcoh2jqtj/z9rJr8/v+ouk3kzLlkVbyujGyl/vjrWalCWWVkZum35FSFlg/xYHQwEse6eJhxwprHkndiYqLKly8vm83mWhYaGqrMzEwlJSWpQoUKngrNJ5y7kKEu4z9Rm7qV9fKAtjr6y//p093HPR0WDJCWkSWbLe9fzYDf/3HPtGd7IiQUEY41rpXHknd6enqexC3J9dxutxd4nNK2klGhB/pbVdpmde2vw+FQwqkkJZxKUuObymvoXY20ed8JD0dZdBwOh6dDKDY2f6vs9mzXPjscDqVnZEq6OImxJH0WZlfSj3Vx7R+Vt4ECAgLyJenc54GBgQUeZ11kI0Pj8lbTH6yptNRKCggIlJ+/f579Ll+xjCpUvE7/iWriwQiL1qED+zwdQrGxXzirc0kpOnhgv/z9rIo7GKtvD51WgM1Pp4//qDNW7/pHBNeOY108SN4GqlKlis6fP6/s7Gz5+18MIzExUYGBgSpbtmyBx+kz53ul2c09sePkv1rp+Q+PauehX/TsvU0V2bO2mkR86NrvmYNvVfCpMxo6N9bDkRad4+8M8HQIxeamOnaNeGOT/s8Rogp+qarboIn+vfuMWjaqoYZNmYFsJiX9WDscDsUdNO+/W0XJY8m7QYMG8vf31759+9S6dWtJ0p49e9SkSZNCTVZLsztNn7wlKSP74n6u/CpeI3o307O9W2jJF4d1e9Pq6nNrbXWb8G9Tfw5+fn6eDqHYhJQJUt+ebfX8zNWK6tdaR859r3nLt2jexIdL1OdQEnCsiweVt4GCgoLUu3dvTZ48Wa+88orOnj2rJUuWaOrUqZ4KySecPp+m40fidMvN12vgHQ10IvGCHpu1Rd8dO+fp0GCgKSPu08ipH2j4zM91XdkyGjukp+7u3NzTYaEIcKyLAXcVM9bYsWM1efJkPfroowoODlZkZKTuvPNOT4bklSr0zXvlufS0VN3z2i5TV9olXelAm+ZNfFiRf2+smxs3pwozMY41roVHk3dQUJCmTZumadOmeTIMAICJWWRA29zLSm/uKgYAMDWLxf1z1l52ypu7igEAzM2TNyax2+3q1auXYmJiXMv27dunvn37qkWLFurWrZtWrVpV6HFJ3gAAFIHMzEyNHDlScXFxrmWJiYl64okn1LZtW61bt07Dhw9XdHS0tm7dWqixaZsDAMzNA7PN4+PjFRUVpZycnDzLv/jiC4WGhmrkyJGSpBo1aigmJkaffvqpOnXqVODxSd4AAHOzWNw/Z13IAXbv3q3w8HCNGDFCzZs3dy3v0KGDGjRokG/9lJTC3VyK5A0AQAGlpKTk+TqfzWbLd58OSerfv/9l33/DDTfohhtucD0/d+6c1q9fr8jIyELFQfIGAJiaxYDKO3fCWseOHZWenu5aHhERUejEmysjI0ORkZEKDQ3VP/7xj0K9l+QNADA1I5P3tm3b8lXe1yI1NVVPP/20jh07pvfff19BQUGFej/JGwCAAgoODnb7KngpKSl6/PHH9dNPP2np0qWqUaNGoccgeQMATM3IyttdTqdTEREROnnypN577z3Vrl37msYheQMAzM2LbkyyevVqxcTEaMGCBSpbtqwSExMlSaVKlVK5cuUKPA7JGwCAYvKf//xHTqdTTz75ZJ7lbdu21XvvvVfgcUjeAABT83Tb/PDhw67fL1682L1AfkfyBgCYmqeTd1EgeQMATM2MyZsbkwAA4GOovAEA5uZFs82NQvIGAJgabXMAAOBxVN4AAFMzY+VN8gYAmJoZkzdtcwAAfAyVNwDA1MxYeZO8AQDmZsKvitE2BwDAx1B5AwBMzSID2uZeVnqTvAEApsY5bwAAfIzFIgOStzGxGIVz3gAA+BgqbwCAqdE2BwDAx9A2BwAAHkflDQAwNdrmAAD4GNrmAADA46i8AQCmZrFaZHWzVLVYvav0JnkDAEyNtjkAAPA4Km8AgKldrLzdK529rfImeQMATM2MbXOSNwDA1Iz5nrcxsRiFc94AAPgYKm8AgKmZsfImeQMATM2M57xpmwMA4GOovAEApkbbHAAAH0PbHAAAeByVNwDA1GibAwDgY2ibAwCAArPb7erVq5diYmJcy06cOKGBAweqefPm6tGjh3bs2FHocUneAABTs8jye+vcjYcKX3pnZmZq5MiRiouLcy3LycnRsGHDFBoaqjVr1ujee+9VRESETp06VaixaZsDAEzNE23z+Ph4RUVFKScnJ8/yXbt26cSJE1qxYoVKly6t2rVra+fOnVqzZo0iIyMLPD6VNwDA1Nyuun9/FMbu3bsVHh6ulStX5lm+f/9+NWzYUKVLl3Yta9Wqlfbt21eo8am8AQAooJSUFPn5+bme22w22Wy2fOv179//su9PTExU5cqV8yyrWLGifvnll0LF4fPJ+/g7A/J8kGbncDh06MC+Erff5dtEeDqEYlc6sJQ2zn1YN3UapbSMLE+HU6yOf/WGp0MoVk6HQ5J0IT1LVj+nh6MpPrn7XdSMbJt37NhR6enpruURERGFanenp6fnS/Y2m012u71Q8fh88gYA4EqM/J73tm3b8lXehREQEKCkpKQ8y+x2uwIDAws1DskbAIACCg4OdqvrWaVKFcXHx+dZ9uuvv+ZrpV8NE9YAAKaW2zZ392GEZs2a6fvvv1dGRoZr2Z49e9SsWbNCjUPyBgCYmidmm/+Vtm3bqmrVqho7dqzi4uL01ltv6bvvvtP9999fqHFI3gAAFBM/Pz/Nnz9fiYmJ+vvf/65PPvlE8+bNU7Vq1Qo1Due8AQDmZkTb2433Hz58OM/zsLAwLVu2zK1wSN4AAFMz413FaJsDAOBjqLwBAKZmxsqb5A0AMDUz3s+b5A0AMDUzVt6c8wYAwMdQeQMATI22OQAAPoa2OQAA8DgqbwCAqdE2BwDAx1gtFlndTL7uvt9otM0BAPAxVN4AAFOjbQ4AgI8x42xzkjcAwNSscv+ctbedY/a2eAAAwFVQeQMATI22OQAAPsaME9ZomwMA4GOovAEApmaRRe4Wzl5WeJO8AQDmZrG4P9uctjkAAHALlTcAwNSYbQ4AgI9htjkAAPA4Km8AgKmZ8ZagBUrec+fOLfCAERER1xwMAABGM2PbvEDJOyYmpkCDWbxt7wAAJd7F5O1efrJYcgyKxhgFSt7vvfdeUccBAAAK6JomrJ04cULTpk3T008/rbNnz2r16tXas2eP0bEBAOC23La5uw9vUujk/b///U/33HOPfv75Z23fvl2ZmZk6cuSIHn30UW3cuLEoYgQA4JpdnLDm/sObFDp5z5gxQ1FRUZo9e7b8/S923Z9//nmNGjVKs2fPNjxAAACQV6GT948//qiOHTvmW96lSxf99NNPhgQFAIBRLAY9vEmhk3f16tUVGxubb/nWrVtVvXp1Q4ICAMAoFy+P6v7DmxT6Ii3PPvusxowZo9jYWDkcDn300Uc6efKk1q9fr+nTpxdFjAAA4E8KXXnfcccdWr58uc6dO6e6detq8+bNstvtWr58uXr06FEUMQIAcM2sFmMe3uSaLo968803U2UDAHyCEW1vL+uaX9v3vD/66CP17dtXbdq00a233qqHH35YX3zxhdGxAQDgk06fPq0nn3xSLVu2VOfOnfXuu+8aOn6hK+9Zs2bp/fff1yOPPKInn3xSTqdT3333nZ5//nkNHz5cAwcONDRAAADc4Ylrmz/77LOqVq2a1q5dq/j4eI0aNUrVq1fXHXfc4V4gvyt08l65cqWmTZum22+/3bWsS5cuuvnmmzVlyhSSNwDAqxR32zw5OVn79u1TdHS0atSooRo1aqhDhw7auXOnYcm70G3znJwcVa1aNd/ymjVrKjMz05CgAAAwisWAyWqFSd6BgYEKCgrS2rVrlZWVpSNHjujbb79VgwYNDNunQifviIgITZo0SQkJCa5lp0+f1pQpUzR06FDDAgMAwBcFBARo4sSJWrlypZo1a6a77rpLf/vb3/TAAw8Yto0Ctc1vvvnmPC2HnJwc9erVS0FBQbJarUpNTZXFYlF8fLwGDx5sWHAAALjLyLZ5SkqK/Pz8XMttNptsNlu+9RMSEnT77bfrscceU1xcnKKjo9WuXTvdc889bsWRq0DJ+1//+pchGwMAoLgZcXnT3Pd37NhR6enpruURERGKjIzMs+7OnTu1evVqbdu2TYGBgWrSpInOnDmjBQsWFG/ybtu2bYEGO3v2rFvBAADgzbZt25av8r7UgQMHFBYWpsDAQNeyhg0bauHChYbFUejZ5keOHNHMmTMVHx8vh8Mh6WIb3W6367ffftMPP/xgWHAAALjLKvdv6Zk7QSw4ODhP8r6cypUr6/jx47Lb7a7kfuTIEd1www1uxXC5eApswoQJ+u233zR48GD9+uuvGjRokLp3766UlBRNmTLFsMAAADBC7ve83X0UVOfOnVWqVCm98MILOnr0qLZs2aKFCxdqwIABhu1ToSvv2NhYrVy5Ug0aNNBHH32kWrVq6aGHHlLNmjW1evVq9enTx7DgAADwNSEhIXr33Xc1ZcoU3X///apQoYKeeuop/eMf/zBsG4WuvP39/RUSEiJJqlWrlg4ePChJuvXWW3X48GHDAkNeGZlZioxerlpdx+jeqBWat3yLp0NCEbCV8td/V4zTbS3rupa9OLyPzv9vbp7HEw/8zYNRoijYsxzq9tgM7dwb7+lQTMcTtwStU6eO3nnnHe3Zs0ebNm3SwIEDDb2taKEr7xYtWmjx4sUaPXq0GjdurPXr1+uxxx7TgQMHFBAQYFhgyGvi7HXae/AnrZs7TLt2f6upiz9XWPVQ3dulhadDg0ECbP56++WBalC7Wp7l9WpU0YtzP9b7/97lWnYhJaO4w0MRyrRnafJbW/XjsTOeDsWULBYDZpv7+o1Jxo4dqx07duj999/Xvffeq3Pnzqlt27YaOXKk+vfvf01B2O129erVSzExMdf0frNLTc/Uex/v1KtR96nZzTeqY8swRT7cRW9/uM3TocEg9Wter03vjFLN6qH5XqsbVkX7D53Q2XMXXI/0zCwPRImi8OOxX9Tn6Tn6OfGCp0OBDyl05V2nTh1t3LhRGRkZCgoK0po1a7R7926VK1dOzZs3L3QAmZmZioqKUlxcXKHfW1Ic+PFnZWU71LZpLdey8Ga19MbSTXI6nbJar+nmcPAit7Wso+3f/KiX53+qUzvecC23Wq2qWrmc4n/ia5hmFbMvQe1a1Fb/22uo67D3PB2OKVktFlndrL198n7ep06duuzy8+fPS5Lq1avnWq9atWqXXfdy4uPjFRUVpZycnAK/pyQ6cy5ZFa8rI1spf9fX8ypXCFFGZpZ+S05VaPkQD0cIdy1Zs+OyywMCA+V0OhU1qJu6tmuo88mpmvf+l1qxni6VWQzofZucDod+Tvje06GYlhnb5gVK3p07d853edRLT7znLsudwFYQu3fvVnh4uEaMGHFNVXtJkZaRJZst76HKfZ5pz/ZESCgmtoBA5eRIccfO6O2V23Rry7qaNa6vLqSma/3W7zwdHuATLBaLLG6mb59M3ps3by6SjV/rOfI/y61Ezczmb5Xdni2Hw+Ha3/QMuyQpoJRfifgMSgeW8nQIxSrQ5qfSgaWUfP439X72XZ1O/D9J0tGTibq51vV64oGO+nJXwX9Q9jXOEvBn+s+czj/2N8fpKDH7/+f9RuEUKHlXr169qOO4ZnEHYz0dQpGzXzirc0kpOrD/W/n7XTy/vXfvfgXY/HT6+I86420nY4rAxrkPezqEYjXjmTuUlpoiSVo6Ke+1kMtXrKQKoZVM/ZmU5BZy4s/H9HMIt1c2klXXMDv7MmN4k0JPWPM2dRs0ueql6nzdTXXsGvHGJqXkXKc2DWoo7mCsfk6SWjaqoYZNS8ZXxW7qNMrTIRSbn7e30nP/3KT9h37S1+89q7hTqXrwmfmu16c996DKlz2vIROWeTDKovX9Z1M9HUKxcjodOn30kCSpUvUaql67jocjKh5/3u+iVGLb5t7Mz8/P9Mk7pEyQ+vZsq1HTV2n2C/30zd7jmv/BfzVv4sOm3/dcaRkl66tRGXaH0jKydOH/ktW2aT0Nuv9v+veX+9X5lpt1f7fWuuep2ab+TKwl5M/15VisfiV6/1EwPp+8S4opI+5T1Ksr1GfYXAUF+Gv0E3fp7s7NPR0WilhGepqGTHhXUY9107gne+qn07/piQnv6n+xRz0dGuAzrBYD2uZmqLwdDoe2b9+uY8eO6e9//7uOHj2qWrVquS6bCuOVDrRpweRHNHfCQzp0YJ9ubtzc0yGhiJRvEyHpj0l6G3cc0Edf7PVkSCgmR7+cSdVdBCwGJG+fb5ufPn1agwcPVlJSkpKTk9WlSxctWrRIe/fu1eLFi1W/fv2iiBMAAPyu0D+MvPTSS2rVqpW2b9/uuk/p66+/rltvvVUvv/zyNQdy+PBhhYeHX/P7AQC4HE/cmKSoFTp5f/PNNxo0aFCeiVKlSpXS008/rQMHDhgaHAAA7rJajHl4k0In78DAQJ07dy7f8qNHjyo4ONiQoAAAwF8rdPLu27evJk6cqK1bt0q6mLTXrFmjCRMm6P777zc6PgAA3GKxGPPwJoWesDZs2DCVLVtWkydPVnp6uoYMGaKKFStq4MCBGjx4cFHECADANSuxdxW71IABAzRgwAClpaXJ4XDwFTEAgNfi8qiSPvrooyu+3rt372sMBQAAFEShk/fs2bPzPHc4HDp37pz8/f3VtGlTkjcAwKuU2Pt5/9mWLVvyLUtNTdXEiRO5QAsAwOuY8Zy3IW38MmXKKDIyUu+8844RwwEAgCsw7MYkhw4dktPpNGo4AAAMQdtcF2eaX3qZuNTUVB0+fFgDBw40Ki4AAAzBXcWky15/3GazadSoUWrXrp0hQQEAgL9W6OSdlJSkRx55RDfddFNRxAMAgKGsssjqZt/b277nXeh4PvnkE1mt3rYbAABcHpdHlTRw4EC9+OKLGjhwoKpVq6aAgIA8r1erVs2w4AAAQH7XfJGW7du3S5Jr8lpOTo4sFosOHjxoYHgAALjHYsCENS8rvAuWvP/3v/+pRYsW8vf31+bNm4s6JgAADGP5/Zd7Y3iXAiXvRx55RDt27FDFihVVvXr1oo4JAADDWC1SjrtjGBKJcQoUT06Ou7sNAACMUuBz3pdemAUAAF9gxsq7wMn7vvvuK9BXxDgnDgDwJhZLCT3nLUmPPfaYQkJCijIWAABQAAVK3haLRT179lTFihWLOh4AAAxVYtvmTFgDAPgqQ+4qZkgkxinQDxN9+vTJdyU1AADgGQVK3lOnTlVwcHBRxwIAgOGsFoshj8Kw2+168cUX1aZNG9166616/fXXDe1iF/ryqAAA+BJPnPN++eWXFRMTo8WLFys1NVUjRoxQtWrV1LdvXzcjubZ4AADAFSQlJWnNmjWKjo5W06ZN1a5dOw0aNEj79+83bBtU3gAAUyvuCWt79uxRcHCw2rZt61o2ZMgQNyPIi8obAGBqVklWWdx8XJSSkpLnYbfb823vxIkTql69uj766CN1795dXbp00bx58+R0Og3bJypvAICpGVl5d+zYUenp6a7lERERioyMzLNuWlqajh8/rhUrVmjq1KlKTEzUxIkTFRQUpEGDBrkZyUUkbwAACmjbtm3y8/NzPbfZbPnW8ff3V0pKil577TXXnThPnTqlDz74gOQNAEBBWCzunyPOrbyDg4PzJO/LqVSpkgICAvLcQrtmzZo6ffq0m1H8gXPeAABTK+7veTdr1kyZmZk6evSoa9mRI0fyJHO398mwkQAAgGrVqqVOnTpp7NixOnTokLZv36633npL/fr1M2wbtM0BAKbmiWubz5w5U9HR0erXr5+CgoL00EMPacCAAW5G8QeSNwDA1C62vN1L39ZCvj8kJETTp093a5tXQtscAAAfQ+UNADA1M94SlOQNADA1I1rM3tam9rZ4AADAVVB5AwBMzWKxyOJm49vd9xuN5A0AMDX355pzzhsAgGLlia+KFTXOeQMA4GOovAEApkbbHAAAH2PRxe96uzVGjiGhGIa2OQAAPobKGwBgahaLRRY3S2+LLJIXVd8kbwCAqVnkfpvZ28550zYHAMDHUHkDAEzNYrG4PWONtjkAAMXIiJY3bXMAAOAWKm/4hPP/m+vpEIqdw+HQoQP79NPWmfLz8/N0OMXqvkW7PR1CsQqwSuNb+enpD79TptPT0RSf3P0uaoa1zb0IyRsAYGpWuX+62rtSN8kbAGByZqy8OecNAICPofIGAJiaGWebk7wBAKZmwO28vS550zYHAMDHUHkDAEzNKoty3KydvW3CGskbAGBqtM0BAIDHUXkDAEztYsubtjkAAD6DtjkAAPA4Km8AgKkx2xwAAB9jxrY5yRsAYGpmTN6c8wYAwMdQeQMATM5iwDlr76q9Sd4AAFOzGtA29za0zQEA8DEkbwCAqVkM+nWthgwZojFjxhi4RyRvAIDJWSzGPK7F+vXrtW3bNmN3SCRvAACKRFJSkqZPn64mTZoYPjYT1gAApmbEjUmu5f3Tpk3Tvffeq7Nnz7q57fyovAEApma1GPOQpJSUlDwPu91+2W3u3LlT33zzjZ5++uki2ScqbwAACqhjx45KT093PY+IiFBkZGSedTIzMzVp0iRNnDhRgYGBRRIHyRsAYGpGts23bdsmPz8/11KbzZZvzblz56px48bq0KGDm9v8ayRvAICpGXFt81zBwcF5kvflrF+/Xr/++qtatGghSa7W+n/+8x/t3bvXkDhI3gAAUyvui6u99957ys7Odj2fOXOmJGnUqFGGbYPkDQCAgapXr57neZkyZSRJYWFhhm2D5A0AMDWrO1dZcfGui6OTvAEApubptPvqq68aPibf8wYAwMdQeQMAzM2EtwQleQMATM1Tl0ctSrTNAQDwMVTeAABTM/IiLd6C5A0AMDWT5W1JtM0BAPA5VN4AAHOjbQ4AgG+x/Om/ZkHyBgCYmsX1HzfkGBCIgTjnDQCAj6HyBgCYnskKb5I3AMDkzHeBNdrmAAD4GipvAICpWX7/5e4o3tQ6J3kDAEzNYvn9EqluDeJd571pmwMA4GOovAEApmbCC6yRvAEAJsdscwAA4GlU3gAAUzNqtrk3IXkDAEzNqNnm3oTkDQAwNSaswWMyMrP03PQP9cmWfSrlJw1/5DcNf+QOT4eFIpKRmaVR01bo4y/2qnTpNYp8uIsiHu7i6bBQBMoG+mvobTV0801l9XrNbK3ee0pfxv3q6bDg5UjePmLi7HXae/AnrZs7TLt2f6upiz9XWPVQ3dulhadDQxGYOHud9h08oX+O6ib/MpUUEf2+bqxageNtQqPvqCs/i0XHEn7U2uP+GtqhltKyHIo5dt7ToZkHs82NdebMGQ0fPlxt27ZVhw4dNHXqVGVmZnoyJK+Ump6p9z7eqVej7lOzm29Ux5Zhiny4i97+cJunQ0MRyD3eU0b8XfXDQtWzUzMNH9CV421CtUPL6OYqIZq3LUEZ6enaeyJJH313Wvc2qerp0EzFYtAvb+Kx5J2Tk6Phw4crPT1dy5cv1xtvvKEvv/xSs2bN8lRIXuvAjz8rK9uhtk1ruZaFN6ulPd8fl9Pp9GBkKAp/HO+armW3NOd4m1GVkAAlp2fp7IU/ipbjv6WpdqXS8nN7hhXMzGPJ+8iRI9q3b5+mTp2qunXrqnXr1ho+fLj+/e9/eyokr3XmXLIqXldGtlJ/nOWoXCFEGZlZ+i051YORoShc7nhXqlCW421CSelZKm3zk83vj3+KQ8vY5G+1qrTNz4ORmUvubHN3H97EY8m7UqVKWrRokUJDQ/MsT0lJ8VBE3istI0s2W97pCbnPM+3ZnggJRehyxzugFMfbjOISU3Q+LUuPtguTxWpVlZAA3d3kekmSv5+XZQsfZjHo4U08NmGtbNmy6tChg+u50+nUsmXLdMsttxRqHIfDYXRoXsfmb5Xdni2Hw+Ha3/QMuyQpoJRfifgMSpI/H2/p4p/x9IyLbdWScrwDSsq1H3NyNPvLeD1zex2FBjfXpNpZ+jT2tAaEh8mR7TD952Az+f4VJa+ZbT5jxgz98MMPWr16daHeF3cwtogi8h72C2d1LilFB/Z/K//f22t79+5XgM1Pp4//qDNWb/uZEO7IPd4HD+yXv59VcQdj9e2h0yXqeI9vVZJaxhk6e+SAfvP3V3Z2tv5Wqayys7M0qplFUkn6HIqQCWebe0XynjFjhpYuXao33nhD9erVK9R76zZoIj8/c/8Bv6mOXSPe2KSUnOvUpkENxR2M1c9JUstGNdSwKV8dMpvc4/1/jhBV8EtV3QZN9O/dZ0rU8R6wdI+nQygWZWx+GnVHPc3eEqenG2Zrxl6H+oeX1S8nLuife8zfYbFZpedaFP2/31wetQhER0frgw8+0IwZM9StW7dCv9/Pz8/0yTukTJD69myrUdNXafYL/fTN3uOa/8F/NW/iw6bf95Io93g/P3O1ovq11pFz32ve8i0l6nhnlpBJ9ZkZDtn8rbq/1Y0q5fhFt9YJVse6lTTh3wdLzGeAa+PR5D137lytWLFCr7/+urp37+7JULzelBH3KerVFeozbK6CAvw1+om7dHfn5p4OC0Vkyoj7NHLqBxo+83NdV7aMxg7pyfE2qde3JOip9jVUp3JDBf1fpl7bHK+EX/lWgZHMeG1zS05OTo4nNpyQkKC7775bQ4YM0UMPPZTntUqVKl31/Q6HQ/v27dPNjZuXmGpEurjfhw6UvP0uiUrysb5v0W5Ph1CsAqwXz/NP2eMoURV37n43b140f8Zz80Rw1XqyWN0bP8fpUMrpH4ss1sLyWOW9efNmORwOLViwQAsWLMjz2uHDhz0UFQDAdJiwZpwhQ4ZoyJAhnto8AAA+i2/ZAQBMzRPXNi/qe3d4fLY5AABFqbgnrOXeu6Ns2bJavny5kpOTNW7cOFmtVo0ePdrNQC6i8gYAwEDFce8OKm8AgKkV97XJi+PeHSRvAIC5GTjbPCUlJc9XxWw2m2w2W55Vjbp3x5WQvAEAKKCOHTsqPT3d9TwiIkKRkZFXfM+13rvjSkjeAABTM/La5tu2bctXeV+JO/fuuBKSNwDA1IycbR4cHFzgK6y5e++OKyF5AwBgsKK+dwfJGwBgeu4W3oW5CUhCQoLmz5+vIUOGqFWrVkpMTHS9VpB7dxQEyRsAYG7FfG3z4rh3B8kbAGBqRkxYK8z7i+PeHVxhDQAAH0PlDQAwNSNmm7s9W91gJG8AgKmZ8HbetM0BAPA1VN4AAFOjbQ4AgM8xX+OctjkAAD6GyhsAYGq0zQEA8DHma5rTNgcAwOdQeQMATI22OQAAPqa4r21eHEjeAADz867c6zbOeQMA4GOovAEApmbG2eYkbwCAqZlxwhptcwAAfAyVNwDA1JhtDgCArzHhSW/a5gAA+BgqbwCAqZmw8CZ5AwDMjdnmAADA46i8AQCmxmxzAAB8DG1zAADgcSRvAAB8DG1zAICpmbFtTvIGAJiaGSes0TYHAMDHUHkDAMzNgLa5lxXeJG8AgLmZ8fKotM0BAPAxVN4AAHMzYelN8gYAmBqzzQEAgMdReQMATM2MF2mh8gYAmJrFoEdhZGZmaty4cWrdurXat2+vJUuWGLErLlTeAABz88CEtenTp+vAgQNaunSpTp06pdGjR6tatWrq3r27m4FcRPIGAMBAaWlpWrVqld5++201atRIjRo1UlxcnJYvX25Y8qZtDgAwNYtBvwrq0KFDys7OVosWLVzLWrVqpf3798vpdBqyTyRvAICp5U5Yc/dRUImJiSpfvrxsNptrWWhoqDIzM5WUlGTIPvls2zwnJ0eS5HA4PBxJ8crd35K23yVRST7WASWsrLBZ8/6/pMjd39x/z4uK04C/Q7ljpKSkyM/Pz7XcZrPlSdKSlJ6enm9Z7nO73e52LJIPJ+/c1kPcwVgPR+IZJXW/S6KSeKzHt/K7+kom9FyLkrnfRrWSL2WxWOTv768fDfo7ZLfbddtttykrK8u1LCIiQpGRkXnWCwgIyJekc58HBgYaEovPJm9/f381adJEVqtVFm/7Ah4A4KpycnLkdDrl7180qchqtapJkyaGVfZZWVnatWtXnmWXVtiSVKVKFZ0/f17Z2dmufUtMTFRgYKDKli1rSCw+m7ytVutlPzQAAHJZrcadi/hzu/xKGjRoIH9/f+3bt0+tW7eWJO3Zs8dVcBqhhJ1hAQCgaAUFBal3796aPHmyvvvuO33xxRdasmSJHnnkEcO2Yckp6pkCAACUMOnp6Zo8ebI2btyo4OBgDR48WAMHDjRsfJI3AAA+hrY5AAA+huQNAICPIXkDAOBjSN4AAPgYkrePKOp7w8I72e129erVSzExMZ4OBUXkzJkzGj58uNq2basOHTpo6tSpyszM9HRY8HI+e5GWkqao7w0L75OZmamoqCjFxcV5OhQUkZycHA0fPlxly5bV8uXLlZycrHHjxslqtWr06NGeDg9ejOTtA4rj3rDwLvHx8YqKiiryGzbAs44cOaJ9+/bp66+/VmhoqCRp+PDhmjZtGskbV0Tb3AcUx71h4V12796t8PBwrVy50tOhoAhVqlRJixYtciXuXCkpKR6KCL6CytsHXO3esBUqVPBgdCgK/fv393QIKAZly5ZVhw4dXM+dTqeWLVumW265xYNRwReQvH1AcdwbFoDnzZgxQz/88INWr17t6VDg5UjePqA47g0LwLNmzJihpUuX6o033lC9evU8HQ68HMnbBxTHvWEBeE50dLQ++OADzZgxQ926dfN0OPABTFjzAX++N2wuo+8NC8Az5s6dqxUrVuj1119Xz549PR0OfAT/8vuA4rg3LIDil5CQoPnz5+uJJ55Qq1atlJiY6HoAV0Lb3EeMHTtWkydP1qOPPqrg4GBFRkbqzjvv9HRYANywefNmORwOLViwQAsWLMjz2uHDhz0UFXwB9/MGAMDH0DYHAMDHkLwBAPAxJG8AAHwMyRsAAB9D8gYAwMeQvAEA8DEkbwAAfAzJGyVG586dVb9+fdejUaNG6t69u959911DtzNgwADNmTNHkjRmzBiNGTPmqu+x2+368MMPr3mba9euVefOnQv92qXmzJmjAQMGXHMc9evXV0xMzDW/H0DBcIU1lCjjxo1Tjx49JEnZ2dnatWuXxo8fr3Llyql3796Gb2/8+PEFWm/9+vVauHChHnzwQcNjAGA+VN4oUUJCQlSpUiVVqlRJVatWVZ8+fdSuXTtt3LixyLYXEhJy1fW40CGAwiB5o8Tz9/dXqVKlJF1seUdHR6tLly7q1KmTUlJSdPr0aQ0dOlTNmjVT586dNXfuXDkcDtf7N23apG7duql58+Z66aWX8rx2adv8448/Vvfu3dWsWTP17dtXP/zwg2JiYjR27Fj9/PPPql+/vk6ePKmcnBzNmzdP7du3V+vWrTV06FCdOnXKNc6ZM2f0+OOPq3nz5urTp49++umnAu/v5s2b1bt3bzVp0kStW7fWyJEjlZqa6no9KytL48ePV7NmzdS1a1dt2LDB9drV4gJQPEjeKLGysrK0ceNGff311+rSpYtr+dq1azVjxgzNnTtXZcqUUUREhCpWrKh169Zp6tSp+vTTT7Vw4UJJUnx8vJ599ln169dPa9asUXZ2tvbs2XPZ7W3fvl3jx4/Xo48+qk8++USNGzfWk08+qRYtWmjcuHG6/vrrtWPHDlWtWlXLli3Tp59+qtdee00rV65UxYoVNWjQIGVlZUmSnnnmGTmdTq1atUpPPPGEli5dWqB9/umnn/TMM8+of//++uyzzzRr1iz997//zXO+fe/eva7PoV+/fho1apSOHz8uSVeNC0Dx4Jw3SpRJkyYpOjpakpSRkaHAwEA9+uijuueee1zrdOrUSS1btpQk7dy5U6dOndKqVatktVpVq1YtjR49WmPHjtWwYcO0Zs0atW7dWgMHDpQkTZgwQV9++eVlt71y5Ur16tVL/fr1kyQ9//zzKlWqlJKTkxUSEiI/Pz9VqlRJkrRo0SJNmjRJ4eHhkqSXXnpJ7du31/bt23XjjTdq7969+vLLL1WtWjXVrVtXBw4c0Oeff37V/Xc6nXrhhRdc59ZvuOEG3XrrrYqLi3OtU7lyZU2ePFmlSpVS7dq1tXXrVq1atUqjRo26YlwFnRQHwH0kb5Qow4cPd91KNSAgQJUqVZKfn1+edapXr+76fUJCgpKSktSqVSvXMqfTqYyMDJ0/f14JCQlq0KCB67VSpUrlef5nR48eVd++fV3PbTabRo8enW+91NRU/fLLLxoxYoSs1j+aYxkZGTp27JgyMzNVrlw5VatWzfVakyZNCpS8a9SoIZvNpgULFiguLk5xcXGKj4/Xvffe61qnQYMGrtMIktSoUSMlJCRcNS4AxYfkjRKlYsWKCgsLu+I6AQEBrt9nZ2erVq1amj9/fr71cieiXTrZ7M+J78/8/Qv21y33nPk///lP1axZM89r1113nXbu3FngbV7q0KFD6tevnzp37uzqGFzacv9zYpYu/rBSqlSpq8YFoPhwzhu4gpo1a+rUqVOqUKGCwsLCFBYWppMnT2r27NmyWCyqW7euYmNjXes7nU4dOnTosmOFhYXlec3hcKhz587as2ePLBaLa3nZsmVVsWJFJSYmurZZtWpVzZgxQ0ePHlW9evWUnJzsOg8tSQcPHizQ/nz88cdq06aNXnvtNfXv319NmzbV8ePH8/ww8OcWuiR99913qlWr1lXjAlB8SN7AFbRv317Vq1fXc889p8OHD+ubb77RhAkTFBQUJD8/Pz344IM6cOCAFixYoCNHjmjatGl/Oft6wIAB+uSTT7Ru3TodP35cU6dOVU5Ojho1aqSgoCAlJyfr2LFjys7O1sCBAzVr1ixt2bJFx44d0wsvvKBvv/1WtWrVUu3atdWuXTuNGzdOhw4d0hdffKFly5YVaH/KlSunw4cP67vvvtPRo0f16quvKjY2Vna73bXOqVOnFB0drYSEBM2bN08//PCD6zz9leICUHxomwNX4OfnpwULFig6OloPPvigSpcure7du7vOVYeFhWnBggWaOnWqFixYoK5du6pjx46XHatNmzaaNGmS5s2bp8TERDVu3FgLFy5UYGCgbrnlFoWFhenuu+/W+++/r8GDBys1NVUTJ05USkqKGjdurMWLF7va02+88YYmTJigvn37qlq1ahowYIDWrl171f0ZMGCAfvjhBw0cOFABAQFq06aNhg0bpvXr17vW6dixo5KSktSnTx9Vr15dCxYsUJUqVSTpqnEBKB6WHK4OAQCAT6FtDgCAjyF5AwDgY0jeAAD4GJI3AAA+huQNAICPIXkDAOBjSN4AAPgYkjcAAD6G5A0AgI8heQMA4GNI3gAA+BiSNwAAPub/AfBEj0k0rcGCAAAAAElFTkSuQmCC"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "    0   1  2\n",
       "0  13   0  0\n",
       "1   0  15  1\n",
       "2   0   0  9"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 90
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    " \n",
    "### Analyse the confusion matrix and provide a prediction, in a comment, whether the model is likely to have higher precision, higher recall, or similar precision and recall."
   ],
   "id": "36a4e8e2bb1ac249"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:52.928875Z",
     "start_time": "2024-09-12T16:10:52.914392Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# F1 Score: This is a harmonic mean of precision and recall. \n",
    "\n",
    "# average f1 score\n",
    "av_f1 = f1_score(y_test, y_pred, average='micro')\n",
    "print(av_f1)\n",
    "\n",
    "# f1 score per class\n",
    "f = f1_score(y_test, y_pred, average=None)\n",
    "lowest_score = min(f)\n",
    "hardest_class = [list(f).index(lowest_score)]\n",
    "print('Hardest class:', hardest_class)\n",
    "\n",
    "# use score method to get accuracy of model\n",
    "score = log_reg.score(x_test, y_test)\n",
    "\n",
    "print('Accuracy: {}'.format(score))"
   ],
   "id": "5acd71c21df2defe",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9736842105263158\n",
      "Hardest class: [2]\n",
      "Accuracy: 0.9736842105263158\n"
     ]
    }
   ],
   "execution_count": 91
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Write your own code to calculate the accuracy, precision, and recall, and check whether your prediction was right.",
   "id": "7ef939238fcf518d"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-09-12T16:10:53.022402Z",
     "start_time": "2024-09-12T16:10:52.998659Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Accuracy: Add all the correct predictions together for all classes and divide by the total number of predictions\n",
    "\n",
    "knn = KNeighborsClassifier(n_neighbors=3)\n",
    "knn.fit(x_train, y_train)\n",
    "y_pred = knn.predict(x_test)\n",
    "print(f'Our model accuracy with k=3 is: {knn.score(x_test, y_test)}')\n",
    "\n",
    "print('Precision:', prec)\n",
    "print('Recall:', rec)"
   ],
   "id": "3562898281003e6c",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Our model accuracy with k=3 is: 0.9736842105263158\n",
      "Precision: 1.0\n",
      "Recall: 1.0\n"
     ]
    }
   ],
   "execution_count": 92
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "The model runs with an accuracy of 0.97, precision of 1  and recall of 1. This ensures that the identification of Iris-setosa, Iris-versicolor and Iris-virginica is almost accurate with Iris-virginica being number 2 in the list as having a miss read in the labelling. ",
   "id": "b3d045e20548826d"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
